<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="AutoImportSettings">
    <option name="autoReloadType" value="SELECTIVE" />
  </component>
  <component name="ChangeListManager">
    <list default="true" id="3e2eee02-5b68-4a9b-ba32-e4232e4c8260" name="Changes" comment="">
      <change afterPath="$PROJECT_DIR$/.gitignore" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/.idea/misc.xml" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/.idea/vcs.xml" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/pom.xml" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/src/main/java/telran/stream/StreamTasks.java" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/src/test/java/telran/stream/StreamTasksTest.java" afterDir="false" />
    </list>
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="FileTemplateManagerImpl">
    <option name="RECENT_TEMPLATES">
      <list>
        <option value="Class" />
      </list>
    </option>
  </component>
  <component name="Git.Settings">
    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
  </component>
  <component name="ProjectColorInfo"><![CDATA[{
  "associatedIndex": 2
}]]></component>
  <component name="ProjectId" id="2kq6HPmLbONcbVu1PtZAnUGKnQv" />
  <component name="ProjectLevelVcsManager" settingsEditedManually="true" />
  <component name="ProjectViewState">
    <option name="hideEmptyMiddlePackages" value="true" />
    <option name="showLibraryContents" value="true" />
  </component>
  <component name="PropertiesComponent"><![CDATA[{
  "keyToString": {
    "JUnit.StreamTasksTest.shuffleTest.executor": "Run",
    "RunOnceActivity.ShowReadmeOnStart": "true",
    "git-widget-placeholder": "master",
    "kotlin-language-version-configured": "true"
  }
}]]></component>
  <component name="RunManager">
    <configuration name="StreamTasksTest.shuffleTest" type="JUnit" factoryName="JUnit" temporary="true" nameIsGenerated="true">
      <module name="Stream-operations" />
      <extension name="coverage">
        <pattern>
          <option name="PATTERN" value="telran.stream.*" />
          <option name="ENABLED" value="true" />
        </pattern>
      </extension>
      <option name="PACKAGE_NAME" value="telran.stream" />
      <option name="MAIN_CLASS_NAME" value="telran.stream.StreamTasksTest" />
      <option name="METHOD_NAME" value="shuffleTest" />
      <option name="TEST_OBJECT" value="method" />
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <recent_temporary>
      <list>
        <item itemvalue="JUnit.StreamTasksTest.shuffleTest" />
      </list>
    </recent_temporary>
  </component>
  <component name="SpellCheckerSettings" RuntimeDictionaries="0" Folders="0" CustomDictionaries="0" DefaultDictionary="application-level" UseSingleDictionary="true" transferred="true" />
  <component name="TaskManager">
    <task active="true" id="Default" summary="Default task">
      <changelist id="3e2eee02-5b68-4a9b-ba32-e4232e4c8260" name="Changes" comment="" />
      <created>1723998672935</created>
      <option name="number" value="Default" />
      <option name="presentableId" value="Default" />
      <updated>1723998672935</updated>
    </task>
    <servers />
  </component>
  <component name="com.github.evgenys91.machinet.common.dslhistory.DslHistoryState">
    <option name="historyDtoById">
      <map>
        <entry key="5a7f6b">
          <value>
            <ChatHistoryModel>
              <option name="contextFilesPaths">
                <list>
                  <option value="$PROJECT_DIR$/src/test/java/telran/stream/StreamTasksTest.java" />
                  <option value="$PROJECT_DIR$/src/main/java/telran/stream/StreamTasks.java" />
                </list>
              </option>
              <option name="id" value="5a7f6b" />
              <option name="initiateTms" value="1724002081780" />
              <option name="request" value=" Интересно, а почему тест возвращает абсолютно идентичные массивы?&#10;-7 10 10 -14 8 25 1  &#10;-7 10 10 -14 8 25 1" />
              <option name="response" value="" />
              <option name="responseDescription" value="Проблема в том, что метод `shuffle` изменяет исходный массив `src_arr` на месте, а затем возвращает его. Это приводит к тому, что и исходный массив, и перемешанный массив указывают на один и тот же объект в памяти, и поэтому они идентичны.&#10;&#10;Чтобы избежать этого, нужно создать копию исходного массива перед его перемешиванием. Вот как это можно сделать:&#10;&#10;```java&#10;package telran.stream;&#10;&#10;import java.util.Random;&#10;import java.util.stream.IntStream;&#10;&#10;public class StreamTasks {&#10;    public static int[] shuffle(int[] src_arr) {&#10;        Random random = new Random();&#10;        int[] copy = src_arr.clone(); // Создаем копию исходного массива&#10;        return IntStream.range(0, copy.length)&#10;                        .map(i -&gt; {&#10;                            int randomIndex = random.nextInt(copy.length - i) + i;&#10;                            int temp = copy[randomIndex];&#10;                            copy[randomIndex] = copy[i];&#10;                            copy[i] = temp;&#10;                            return copy[i];&#10;                        })&#10;                        .toArray();&#10;    }&#10;}&#10;```&#10;&#10;Теперь метод `shuffle` создает копию исходного массива и перемешивает её, не изменяя исходный массив.&#10;&#10;Также обновим тест, чтобы он корректно проверял, что массив действительно перемешан:&#10;&#10;```java&#10;package telran.stream;&#10;&#10;import org.junit.jupiter.api.Test;&#10;import static org.junit.jupiter.api.Assertions.assertFalse;&#10;import java.util.Arrays;&#10;&#10;public class StreamTasksTest {&#10;    @Test&#10;    public void shuffleTest() {&#10;        int[] start = {1, 8, 10, -7, 25, 10, -14};&#10;        int[] shuffled = StreamTasks.shuffle(start);&#10;&#10;        // Проверка, что массив перемешан&#10;        assertFalse(Arrays.equals(start, shuffled), &quot;The array was not shuffled&quot;);&#10;&#10;        // Дополнительная проверка, что все элементы присутствуют&#10;        Arrays.sort(start);&#10;        Arrays.sort(shuffled);&#10;        assertTrue(Arrays.equals(start, shuffled), &quot;The shuffled array does not contain the same elements&quot;);&#10;    }&#10;}&#10;```&#10;&#10;В этом тесте:&#10;1. Мы проверяем, что перемешанный массив отличается от исходного.&#10;2. Мы также проверяем, что перемешанный массив содержит те же элементы, что и исходный, путем сортировки обоих массивов и их сравнения." />
              <option name="responseFileName" value="" />
              <option name="responseFilePath" value="" />
              <option name="responseTms" value="1724002092692" />
              <option name="usedLocalFilePaths">
                <list>
                  <option value="$PROJECT_DIR$/src/main/java/telran/stream/StreamTasks.java" />
                  <option value="$PROJECT_DIR$/src/test/java/telran/stream/StreamTasksTest.java" />
                </list>
              </option>
            </ChatHistoryModel>
          </value>
        </entry>
        <entry key="722c4f">
          <value>
            <ChatHistoryModel>
              <option name="contextFilesPaths">
                <list>
                  <option value="$PROJECT_DIR$/src/test/java/telran/stream/StreamTasksTest.java" />
                  <option value="$PROJECT_DIR$/src/main/java/telran/stream/StreamTasks.java" />
                </list>
              </option>
              <option name="id" value="722c4f" />
              <option name="initiateTms" value="1724000811589" />
              <option name="request" value=" у нас есть stream. у нас есть входящий массив. нам надо его перемешать (shuffle). что из методов stream нам подойдет?" />
              <option name="response" value="" />
              <option name="responseDescription" value="Для перемешивания массива с использованием Stream API, можно воспользоваться комбинацией методов `boxed()`, `collect()`, и `Collections.shuffle()`. Однако, сам метод `shuffle()` из `Collections` не является частью Stream API, но его можно использовать в комбинации с потоками для достижения желаемого результата.&#10;&#10;Вот как можно реализовать метод `shuffle`:&#10;&#10;1. Преобразовать массив в поток.&#10;2. Преобразовать поток в список.&#10;3. Перемешать список.&#10;4. Преобразовать список обратно в массив.&#10;&#10;Вот пример кода:&#10;&#10;```java&#10;package telran.stream;&#10;&#10;import java.util.Arrays;&#10;import java.util.Collections;&#10;import java.util.List;&#10;import java.util.stream.Collectors;&#10;&#10;public class StreamTasksTest {&#10;    public static int[] shuffle(int[] src_arr) {&#10;        List&lt;Integer&gt; list = Arrays.stream(src_arr)&#10;                                   .boxed()&#10;                                   .collect(Collectors.toList());&#10;        Collections.shuffle(list);&#10;        return list.stream()&#10;                   .mapToInt(Integer::intValue)&#10;                   .toArray();&#10;    }&#10;}&#10;```&#10;&#10;Этот метод выполняет следующие шаги:&#10;1. Преобразует массив `src_arr` в поток с помощью `Arrays.stream(src_arr)`.&#10;2. Преобразует поток в список объектов `Integer` с помощью `boxed()` и `collect(Collectors.toList())`.&#10;3. Перемешивает список с помощью `Collections.shuffle(list)`.&#10;4. Преобразует список обратно в массив примитивов `int` с помощью `mapToInt(Integer::intValue).toArray()`.&#10;&#10;Каждый вызов метода `shuffle` будет возвращать новый массив с элементами в случайном порядке." />
              <option name="responseFileName" value="" />
              <option name="responseFilePath" value="" />
              <option name="responseTms" value="1724000816577" />
              <option name="usedLocalFilePaths">
                <list>
                  <option value="$PROJECT_DIR$/src/main/java/telran/stream/StreamTasks.java" />
                  <option value="$PROJECT_DIR$/src/test/java/telran/stream/StreamTasksTest.java" />
                </list>
              </option>
            </ChatHistoryModel>
          </value>
        </entry>
        <entry key="bf8ad4">
          <value>
            <ChatHistoryModel>
              <option name="contextFilesPaths">
                <list>
                  <option value="$PROJECT_DIR$/src/test/java/telran/stream/StreamTasksTest.java" />
                  <option value="$PROJECT_DIR$/src/main/java/telran/stream/StreamTasks.java" />
                </list>
              </option>
              <option name="id" value="bf8ad4" />
              <option name="initiateTms" value="1724001682870" />
              <option name="request" value=" int[] is not a functional interface это у нас что?" />
              <option name="response" value="" />
              <option name="responseDescription" value="Ошибка &quot;int[] is not a functional interface&quot; возникает из-за неправильного использования оператора `::` для ссылки на метод. В вашем тестовом методе вы пытаетесь использовать `StreamTasks::shuffle` как функциональный интерфейс, что неверно для массивов примитивов.&#10;&#10;Вместо этого, вам нужно просто вызвать метод `shuffle` напрямую. Вот исправленный тестовый метод:&#10;&#10;```java&#10;package telran.stream;&#10;&#10;import org.junit.jupiter.api.Test;&#10;import static org.junit.jupiter.api.Assertions.assertNotEquals;&#10;import java.util.Arrays;&#10;&#10;public class StreamTasksTest {&#10;    @Test&#10;    public void shuffleTest() {&#10;        int[] start = {1, 8, 10, -7, 25, 10, -14};&#10;        int[] shuffled = StreamTasks.shuffle(start);&#10;&#10;        // Проверка, что массив перемешан&#10;        assertNotEquals(Arrays.toString(start), Arrays.toString(shuffled), &quot;The array was not shuffled&quot;);&#10;    }&#10;}&#10;```&#10;&#10;В этом тесте:&#10;1. Мы создаем исходный массив `start`.&#10;2. Вызываем метод `shuffle` для перемешивания массива.&#10;3. Используем `assertNotEquals` для проверки, что перемешанный массив отличается от исходного массива. &#10;&#10;Этот тест проверяет, что метод `shuffle` действительно изменяет порядок элементов в массиве." />
              <option name="responseFileName" value="" />
              <option name="responseFilePath" value="" />
              <option name="responseTms" value="1724001687055" />
              <option name="usedLocalFilePaths">
                <list>
                  <option value="$PROJECT_DIR$/src/main/java/telran/stream/StreamTasks.java" />
                  <option value="$PROJECT_DIR$/src/test/java/telran/stream/StreamTasksTest.java" />
                </list>
              </option>
            </ChatHistoryModel>
          </value>
        </entry>
        <entry key="d92c14">
          <value>
            <ChatHistoryModel>
              <option name="contextFilesPaths">
                <list>
                  <option value="$PROJECT_DIR$/src/test/java/telran/stream/StreamTasksTest.java" />
                  <option value="$PROJECT_DIR$/src/main/java/telran/stream/StreamTasks.java" />
                </list>
              </option>
              <option name="id" value="d92c14" />
              <option name="initiateTms" value="1724001014969" />
              <option name="request" value=" можем ли мы обойтись без использования List и Collections?" />
              <option name="response" value="" />
              <option name="responseDescription" value="Да, можно обойтись без использования `List` и `Collections`, если использовать более функциональный подход. Для этого можно воспользоваться методом `IntStream.range` для создания потока индексов, перемешать их, а затем использовать их для создания нового массива.&#10;&#10;Вот пример, как это можно сделать:&#10;&#10;```java&#10;package telran.stream;&#10;&#10;import java.util.Arrays;&#10;import java.util.Random;&#10;import java.util.stream.IntStream;&#10;&#10;public class StreamTasksTest {&#10;    public static int[] shuffle(int[] src_arr) {&#10;        Random random = new Random();&#10;        return IntStream.range(0, src_arr.length)&#10;                        .map(i -&gt; {&#10;                            int randomIndex = random.nextInt(src_arr.length - i) + i;&#10;                            int temp = src_arr[randomIndex];&#10;                            src_arr[randomIndex] = src_arr[i];&#10;                            src_arr[i] = temp;&#10;                            return src_arr[i];&#10;                        })&#10;                        .toArray();&#10;    }&#10;}&#10;```&#10;&#10;Этот метод выполняет следующие шаги:&#10;1. Создает поток индексов от 0 до длины массива с помощью `IntStream.range(0, src_arr.length)`.&#10;2. Для каждого индекса `i` выбирает случайный индекс `randomIndex` в оставшейся части массива.&#10;3. Меняет местами элементы массива `src_arr[i]` и `src_arr[randomIndex]`.&#10;4. Возвращает новый массив, который является перемешанной версией исходного массива.&#10;&#10;Этот подход позволяет избежать использования промежуточного списка и метода `Collections.shuffle()`, сохраняя при этом функциональный стиль программирования." />
              <option name="responseFileName" value="" />
              <option name="responseFilePath" value="" />
              <option name="responseTms" value="1724001019795" />
              <option name="usedLocalFilePaths">
                <list>
                  <option value="$PROJECT_DIR$/src/main/java/telran/stream/StreamTasks.java" />
                  <option value="$PROJECT_DIR$/src/test/java/telran/stream/StreamTasksTest.java" />
                </list>
              </option>
            </ChatHistoryModel>
          </value>
        </entry>
        <entry key="f67c7a">
          <value>
            <ChatHistoryModel>
              <option name="contextFilesPaths">
                <list>
                  <option value="$PROJECT_DIR$/src/test/java/telran/stream/StreamTasksTest.java" />
                  <option value="$PROJECT_DIR$/src/main/java/telran/stream/StreamTasks.java" />
                </list>
              </option>
              <option name="id" value="f67c7a" />
              <option name="initiateTms" value="1724000902239" />
              <option name="request" value=" что за метод boxed()?" />
              <option name="response" value="" />
              <option name="responseDescription" value="Метод `boxed()` используется для преобразования потока примитивов (например, `int`, `long`, `double`) в поток их соответствующих объектных типов (например, `Integer`, `Long`, `Double`). Это полезно, когда вам нужно использовать методы, которые работают с объектами, а не с примитивами.&#10;&#10;В контексте Java Streams, `boxed()` применяется к примитивным потокам (`IntStream`, `LongStream`, `DoubleStream`) и возвращает поток объектных типов (`Stream&lt;Integer&gt;`, `Stream&lt;Long&gt;`, `Stream&lt;Double&gt;` соответственно).&#10;&#10;Пример использования `boxed()`:&#10;&#10;```java&#10;IntStream intStream = IntStream.of(1, 2, 3, 4, 5);&#10;Stream&lt;Integer&gt; integerStream = intStream.boxed();&#10;```&#10;&#10;В вашем случае, `boxed()` используется для преобразования `IntStream` в `Stream&lt;Integer&gt;`, чтобы можно было использовать методы, которые работают с объектами, такие как `collect(Collectors.toList())`.&#10;&#10;Вот еще раз полный пример метода `shuffle` с использованием `boxed()`:&#10;&#10;```java&#10;package telran.stream;&#10;&#10;import java.util.Arrays;&#10;import java.util.Collections;&#10;import java.util.List;&#10;import java.util.stream.Collectors;&#10;&#10;public class StreamTasksTest {&#10;    public static int[] shuffle(int[] src_arr) {&#10;        List&lt;Integer&gt; list = Arrays.stream(src_arr)&#10;                                   .boxed()&#10;                                   .collect(Collectors.toList());&#10;        Collections.shuffle(list);&#10;        return list.stream()&#10;                   .mapToInt(Integer::intValue)&#10;                   .toArray();&#10;    }&#10;}&#10;```&#10;&#10;Этот метод выполняет следующие шаги:&#10;1. Преобразует массив `src_arr` в поток примитивов `IntStream` с помощью `Arrays.stream(src_arr)`.&#10;2. Преобразует поток примитивов в поток объектов `Stream&lt;Integer&gt;` с помощью `boxed()`.&#10;3. Преобразует поток объектов в список `List&lt;Integer&gt;` с помощью `collect(Collectors.toList())`.&#10;4. Перемешивает список с помощью `Collections.shuffle(list)`.&#10;5. Преобразует список обратно в массив примитивов `int` с помощью `mapToInt(Integer::intValue).toArray()`." />
              <option name="responseFileName" value="" />
              <option name="responseFilePath" value="" />
              <option name="responseTms" value="1724000908640" />
              <option name="usedLocalFilePaths">
                <list>
                  <option value="$PROJECT_DIR$/src/main/java/telran/stream/StreamTasks.java" />
                  <option value="$PROJECT_DIR$/src/test/java/telran/stream/StreamTasksTest.java" />
                </list>
              </option>
            </ChatHistoryModel>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>